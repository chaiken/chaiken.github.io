Motivation

Would you like to try running the latest release of PCBSD?   Would you like to tcheck out systemd in the latest Fedora-ARM release?   Or maybe you need a clean build environment for packaging?   Qemu is a simple and safe way to run a different operating system for your host architecture (with the KVM hypervisor) or for a different one (plain Qemu without KVM).  In the first case, Qemu environments allow a much richer experience than live-booting a USB stick or CD.   In the cross-architecture case, Qemu is one of few open-source emulator alternatives.

Right now, Docker is all the rage, but Docker is based on Linux's lxc containers.   Lxc containers share a kernel and thus do not allow cross-arch testing.   On the other hand, Qemu virtual machines running a different kernel are much slower than containers.

Disclaimer

There are probably better ways to perform the following steps than I outline here, and I'm happy to receive corrections or suggestions.   These instructions have worked for me, and are distilled from a large amount of sometimes confusing and lengthy documentation

First: Installed needed software packages

On Debian Testing,

apt-get install dnsmasq-utils dnmasq resolvconf libvirt0 qemu qemu-kvm qemu-system-arm qemu-user bridge-utils libvirt-bin libvirt0

Second: Install the guest OS in a virtual disk

Virtual machines are big fun!   But they can be space hogs.    I recommend installing them on an old spare drive mounted in a USB enclosure.

Example: here's a bash script that uses an ISO image downloaded from fedoraproject.org to install Fedora 21 in a Qemu-kvm VM.   The "--enable-kvm" switch will work only if the host and image architectures are the same.   Similarly, qemu-system-x86_64 is for x86-on-x86 guests.

#!/bin/bash
#run with "sudo -u alison ~alison/bin/install_Ubuntu_IVI_Qemu"
#Without -u, xauth error:
#"Could not initialize SDL(No available video device) - exiting"
ROOTDIR=/mnt/VMs/
ISO=Fedora-Live-Desktop-x86_64-20-1.iso
HDNAME=fedora-x86_64-bldr
sudo qemu-img create -f raw ${ROOTDIR}/${HDNAME}.raw 20G
sudo chown alison ${ROOTDIR}/${HDNAME}.raw
#installs from "cdrom" onto "hard disk a"
qemu-system-x86_64 --enable-kvm --cdrom ${ROOTDIR}/${ISO} -boot d -hda ${ROOTDIR}/${HDNAME}.raw -m 2048 -net nic,model=e1000  -net user,hostfwd=tcp:127.0.0.1:6666-:22 -name ${HDNAME} -localtime -no-reboot 

The ROOTDIR is where the virtual disk of the VM is located.  Note that the script specifies a "raw" image of size 100 GB.   See the man page for qemu-img for more information.

The "chown" is necessary if you want to be able to boot the VM without root permission.   The "m" switch allocates memory from your host to the VM.   The "-no-reboot" allows switching from installer script above to the normal starter one below.

Third: Run the guest OS

#!/bin/bash
ROOTDIR=/mnt/VMs/
HDNAME=fedora-x86_64-bldr
qemu-system-x86_64 --enable-kvm -boot c -hda ${ROOTDIR}/${HDNAME}.raw -m 4096 -net nic,model=e1000  -net user,hostfwd=tcp:127.0.0.1:6666-:22 -name ${HDNAME} -localtime

Note that this script specifies 4 GB of virtual RAM while the one above specified 2 GB.   In fact these parameters are freely specifiable at boot time.   Similarly, features like audio or network can be changed at every boot.

Fourth: Set up networking

Reference: <a href="http://wiki.libvirt.org/page/Networking#Host_configuration">libvirt.org</a>.

The option "-net user,hostfwd=tcp:127.0.0.1:6666-:22" means that port 22 on the guest is forwarded to port 6666 on the host.   Thus it is possible to remotely login to the guest via sesions like:

ssh -p 6666 username@127.0.0.1
username@127.0.0.1's password: 

But first you must configure the host machine to allow bridge networking.   Begin by installing the packages listed at the top of this page.   

[alison@hildesheim ~]$ sudo virsh net-define /etc/libvirt/qemu/networks/default.xml 
error: Failed to define network from /etc/libvirt/qemu/networks/default.xml
error: operation failed: network 'default' already exists with uuid a3f2e4f4-661c-41e9-9735-11866e62d29b

[alison@hildesheim mel-scripts (merge_boottime)]$ sudo virsh net-autostart default
Network default marked as autostarted

[alison@hildesheim mel-scripts (merge_boottime)]$ sudo virsh net-start default
Network default started

Now the virbr0 network interface is available:

[alison@hildesheim mel-scripts (merge_boottime)]$ ip addr list
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 28:d2:44:54:7f:5a brd ff:ff:ff:ff:ff:ff
    inet 134.86.178.160/23 brd 134.86.179.255 scope global dynamic eth0
       valid_lft 31577sec preferred_lft 31577sec
    inet6 fe80::2ad2:44ff:fe54:7f5a/64 scope link 
       valid_lft forever preferred_lft forever
3: wlan0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
    link/ether 7c:7a:91:0d:ec:ab brd ff:ff:ff:ff:ff:ff
5: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 82:7c:ac:76:38:75 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever


[alison@hildesheim ~]$ brctl show
bridge name     bridge id               STP enabled     interfaces
virbr0          8000.000000000000       yes

[alison@hildesheim ~]$ sudo emacs -nw /etc/sysctl.conf

# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1
